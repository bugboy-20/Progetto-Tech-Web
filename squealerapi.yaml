openapi: 3.0.3
info:
  title: Squealer API
  description: squealer backend API. TODO gestire il capio psw
  version: '0.2'
servers:
  - url: http://site222315.tw.cs.unibo.it/api
tags:
  - name: Auth
    description: Authenticate your squealer account
  - name: User
    description: Handle the user account
  - name: Errors
    description: Keep track when something fault
  - name: Squeals
    description: Handle squealer's messages
  - name: Channels
    description: Handle squealer's receivers

paths:
  /users/{username}:
    put:
      tags:
        - User
      description: Register a new user
      summary: Register a new user
      parameters:
        - name: username
          in: path
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Operation successful
        '400':
          description: Bad Request
        '422':
          description: Unprocessable Entity
        '409':
          description: Username already taken
    delete:
      tags:
        - User
      description: Delete the current user account
      summary: Delete the current user account
      parameters:
        - name: username
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Operation Successful
        '400':
          description: User not found
  /users/:
    get:
      tags:
        - User
      summary: List users
      responses:
        '200':
          description: All users list

  /token:
    summary: get the token
    description: get the token
    post:
      summary: get the token
      description: get the token
      operationId: ''
      responses:
        default:
          description: Default error sample response
      tags:
        - Auth
    delete:
      summary: delete a token (aka logout)
      operationId: ''
      responses:
        default:
          description: Default error sample response
      tags:
        - Auth

  /logs/:
    put:
      tags:
        - Errors
      summary: Add an error message to the list
      description: Add an error message to the list
      responses:
        '200':
          description: Operation Successful
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
    get:
      tags:
        - Errors
      summary: Show the list of all the errors appened so far
      description: Show the list of all the errors appened so far
      responses:
        '200':
          description: Operation Successful

  /info:
    options:
      summary: Server options
      responses:
        '200':
          description: SOOS

  /squeals/:
    get:
      tags:
        - Squeals
      summary: List the squeals
      description: List all the squeals, or filter them with a query
      parameters:
        - name: channels
          in: query
          schema:
            type: array
            items:
              type: string
          required: false
        - name: username
          in: query
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Operation Successful
    post:
      tags:
        - Squeals
      summary: Add a new squeal
      description: Add a new squeal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Squeal'
      responses:
        '200':
          description: Operation Successful

  /squeals/{id}:
    get:
      tags:
        - Squeals
      summary: Get a specific squeal
      description: Get a specific squeal
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      responses:
        '200':
          description: Operation Successful
    delete:
      tags:
        - Squeals
      summary: Delete a specific squeal
      description: Delete a specific squeal
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      responses:
        '200':
          description: Operation Successful

  /channels/:
    get:
      tags:
        - Channels
      summary: List the channels
      description: List all the channels, or filter them with a query
      parameters:
        - name: type
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Operation Successful
    post:
      tags:
        - Channels
      summary: Add a new channel
      description: Add a new channel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      responses:
        '200':
          description: Operation Successful
  /channels/{channelName}:
    get:
      tags:
        - Channels
      summary: Show channel infos
      description: TODO
      parameters:
        - name: channelName
          in: path
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Operation Successful

components:
  schemas:
    User:
      type: object
      required:
        - username
        - email
        - firstname
        - lastname
        - password
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        firstname:
          type: string
        lastname:
          type: string
        password:
          type: string
          format: password
        type:
          type: string
          enum:
            - standard
            - professional
            - moderator
        SMM:
          type: string
          format: uuid
          nullable: true
        verified:
          type: boolean
        quote_modifier:
          type: number
    Error:
      type: object
      required:
        - path
        - method
        - message
      properties:
        path:
          type: string
          format: url
        method:
          type: string
          enum:
            - GET
            - POST
            - PUT
            - DELETE
            - PATCH
        message:
          type: string

    Squeal:
      type: object
      required:
        - receivers
        - author
        - body
        - datetime
        - positive_reaction
        - negative_reaction
        - category
        - automatic_receiver
      properties:
        id:
          type: number
        receivers:
          type: array
          items:
            type: string
        author:
          type: string
        body:
          type: string #| img | video | geolocazione
        datetime:
          type: string
          format: date-time
        impressions:
          type: number
        positive_reaction:
          type: number
        negative_reaction:
          type: number
        category:
          type: object
        automatic_receiver:
          type: array
          items:
            type: string

    Channel:
      type: object
      required:
        - name
        - description
        - type
        - subscribed
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - public
            - private
        subscribed:
          type: array
          items:
            type: string
# Message {
# id: number
# receivers: [§leagueofpanni, ..]: string[]
# author: username
# body: string | img | video | geolocazione
# datetime: datetime
# impressions: number
# positive_reaction: number
# negative_reaction: number
# category: object
# automatic_receiver: [§CONTROVERSIAL, ..]: string[]
# }
