openapi: 3.0.3
info:
  title: Squealer API
  description: squealer backend API. TODO gestire il cambio psw
  version: '0.2'
servers:
  - url: http://site222315.tw.cs.unibo.it/api
tags:
  - name: Auth
    description: Authenticate your squealer account
  - name: User
    description: Handle the user account
  - name: Errors
    description: Keep track when something fault
  - name: Squeals
    description: Handle squealer's messages
  - name: Channels
    description: Handle squealer's receivers

paths:
  /users/{username}:
    put:
      tags:
        - User
      description: Register a new user
      summary: Register a new user
      parameters:
        - name: username
          in: path
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserWrite'
      responses:
        '201':
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        '400':
          description: Bad Request
        '422':
          description: Unprocessable Entity
        '409':
          description: Username already taken
    delete:
      tags:
        - User
      description: Delete the current user account
      summary: Delete the current user account
      parameters:
        - name: username
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        '400':
          description: User not found
  /users/:
    get:
      tags:
        - User
      summary: List users
      responses:
        '200':
          description: All users list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRead'

  /token:
    summary: get the token
    description: get the token
    post:
      summary: get the token
      description: Get the jwt token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      operationId: ''
      responses:
        '200':
          description: Successful response
          content:
            plain/text:
              schema:
                type: string
        default:
          description: Default error sample response
      tags:
        - Auth
    delete:
      summary: delete a token (aka logout)
      operationId: ''
      responses:
        default:
          description: Default error sample response
      tags:
        - Auth

  /logs/:
    put:
      tags:
        - Errors
      summary: Add an error message to the list
      description: Add an error message to the list
      responses:
        '200':
          description: Operation Successful
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
    get:
      tags:
        - Errors
      summary: Show the list of all the errors appened so far
      description: Show the list of all the errors appened so far
      responses:
        '200':
          description: Operation Successful

  /info:
    options:
      summary: Server options
      responses:
        '200':
          description: SOOS

  /media:
    post:
      summary: Upload a media file and get its URL
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                media:
                  type: string
                  format: binary
              description: The media file to upload
      responses:
        '200':
          description: Successful response with media URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
                    description: URL of the uploaded media
        '400':
          description: Bad request

  /squeals/:
    get:
      tags:
        - Squeals
      summary: Get squeals with optional filters
      parameters:
        - name: author
          in: query
          schema:
            type: string
          description: Filter squeals by author
        - name: channel
          in: query
          schema:
            type: string
          description: Filter squeals by channel
        - name: page
          in: query
          schema:
            type: integer
            minimum: 0
          description: Page number for pagination (default 0)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SquealRead'
        '400':
          description: Bad request
    post:
      tags:
        - Squeals
      summary: Add a new squeal
      description: Add a new squeal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SquealWrite'
      responses:
        '200':
          description: Operation Successful

  /squeals/{id}:
    get:
      tags:
        - Squeals
      summary: Get a specific squeal
      description: Get a specific squeal
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      responses:
        '200':
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SquealRead'
    delete:
      tags:
        - Squeals
      summary: Delete a specific squeal
      description: Delete a specific squeal
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      responses:
        '200':
          description: Operation Successful
    patch:
      tags:
        - Squeals
      summary: Update a squeal
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the squeal to update
      requestBody:
        description: Update operation for the squeal
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                op:
                  type: string
                  enum: [viewed, upvote, downvote]
                  description: The operation to perform on the squeal
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad request
        '404':
          description: Squeal not found

  /channels/:
    get:
      tags:
        - Channels
      summary: List the channels
      description: List all the channels, or filter them with a query
      parameters:
        - name: type
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Operation Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
    post:
      tags:
        - Channels
      summary: Add a new channel
      description: Add a new channel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      responses:
        '200':
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
  /channels/{channelName}:
    get:
      tags:
        - Channels
      summary: Show channel infos
      description: TODO
      parameters:
        - name: channelName
          in: path
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
  /channels/{name}/squeals:
    get:
      tags:
        - Channels
      summary: Get squeals for a specific channel
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: The name of the channel
        - name: author
          in: query
          schema:
            type: string
          description: Filter squeals by author
        - name: page
          in: query
          schema:
            type: integer
            minimum: 0
          description: Page number for pagination (default 0)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SquealRead'
        '400':
          description: Bad request

components:
  schemas:
    login:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    UserRead:
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
        email:
          type: string
          format: email
        firstname:
          type: string
        lastname:
          type: string
        type:
          type: string
          enum:
            - standard
            - professional
            - moderator
        SMM:
          type: string
          pattern: '^@(.+)$'
          nullable: true
        verified:
          type: boolean
        quote:
          $ref: '#/components/schemas/Quota'

    UserWrite:
      type: object
      required:
        - username
        - email
        - firstname
        - lastname
        - password
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        firstname:
          type: string
        lastname:
          type: string
        password:
          type: string
          format: password
        type:
          type: string
          enum:
            - standard
            - professional
            - moderator
        SMM:
          type: string
          pattern: '^@(.+)$'
          nullable: true

    Error:
      type: object
      required:
        - path
        - method
        - message
      properties:
        path:
          type: string
          format: url
        method:
          type: string
          enum:
            - GET
            - HEAD
            - POST
            - PUT
            - DELETE
            - PATCH
            - OPTIONS
        message:
          type: string

    SquealWrite:
      type: object
      required:
        - receivers
        - author
        - body
        - category
      properties:
        receivers:
          type: array
          items:
            $ref: '#/components/schemas/Receiver'
        author:
          $ref: '#/components/schemas/Username'
        body:
          oneOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - text
                content:
                  type: string
              required:
                - type
                - content
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - media
                content:
                  type: string
              required:
                - type
                - content
        category:
          type: array
          items:
            type: string

    SquealRead:
      type: object
      required:
        - receivers
        - author
        - body
        - datetime
        - positive_reaction
        - negative_reaction
        - category
      properties:
        _id:
          type: string
        receivers:
          type: array
          items:
            $ref: '#/components/schemas/Receiver'
        author:
          $ref: '#/components/schemas/Username'
        body:
          oneOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - text
                content:
                  type: string
              required:
                - type
                - content
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - media
                content:
                  type: string
              required:
                - type
                - content
        datetime:
          type: string
          format: date-time
        impressions:
          type: integer
        positive_reaction:
          type: integer
        negative_reaction:
          type: integer
        category:
          type: array
          items:
            type: string

    Channel:
      type: object
      required:
        - name
        - description
        - type
        - subscribed
      properties:
        name:
          $ref: '#/components/schemas/ChannelName'
        description:
          type: string
        type:
          type: string
          enum:
            - public
            - private
        subscribed:
          type: array
          items:
            type: string

    Quota:
      type: object
      properties:
        actualD:
          type: integer
        actualW:
          type: integer
        actualM:
          type: integer
        maxD:
          type: integer
        maxW:
          type: integer
        maxM:
          type: integer
    Username:
      type: string
      pattern: '^@(.+)$'
    ChannelName:
      type: string
      pattern: '^§([a-z]+|[A-Z]+)|#.+$'
    Receiver:
      oneOf:
        - $ref: '#/components/schemas/Username'
        - $ref: '#/components/schemas/ChannelName'
# Message {
# id: number
# receivers: [§leagueofpanni, ..]: string[]
# author: username
# body: string | img | video | geolocazione
# datetime: datetime
# impressions: number
# positive_reaction: number
# negative_reaction: number
# category: object
# automatic_receiver: [§CONTROVERSIAL, ..]: string[]
# }
