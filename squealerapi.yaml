openapi: 3.0.3
info:
  title: Squealer API
  description: squealer backend API. TODO gestire il capio psw 
  version: '0.1'
servers:
  - url: http://site222315.tw.cs.unibo.it/api
tags:
  - name: Auth
    description: Authenticate your squealer account
  - name: User
    description: Handle the user account
  - name: Errors
    description: Keep trak when somthing fault


paths:
  /users/{username}:
    put:
      tags:
        - User
      description: Register a new user
      summary: Register a new user
      parameters:
        - name: username
          in: path
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Operation successful
        '400':
          description: Bad Request
        '422':
          description: Unprocessable Entity
        '409':
          description: Username already taken
    delete:
      tags:
        - User
      description: Delete the current user account
      summary: Delete the current user account
      parameters:
        - name: username
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Operation Successful
        '400':
          description: User not found
  /users/:
    get:
      tags:
      - User
      summary: List users
      responses:
        '200':
          description: All users list
  
  
  
  
  /token:
    summary: get the token
    description: get the token
    get:
      summary: get the token
      description: get the token
      operationId: ''
      responses:
        default:
          description: Default error sample response
      tags:
        - Auth
    delete:
      summary: delete a token (aka logout)
      operationId: ''
      responses:
        default:
          description: Default error sample response
      tags:
        - Auth
  

    
  /logs/:
    put:
      tags:
        - Errors
      summary: Add an error message to the list
      description: Add an error message to the list
      responses:
        '200':
          description: Operation Successful
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
    get:
      tags:
        - Errors
      summary: Show the list of all the errors appened so far
      description: Show the list of all the errors appened so far
      responses:
        '200':
          description: Operation Successful
          
          
          
          
          
          
          
          
  /info:
    options:
      summary: Server options
      responses:
        '200':
          description: SOOS
          
components:
  schemas:
    User:
      type: object
      required:
        - username
        - email
        - firstname
        - lastname
        - password
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        firstname:
          type: string
        lastname:
          type: string
        password:
          type: string
          format: password
        type:
          type: string
          enum:
            - standard
            - professional
            - moderator
        SMM:
          type: string
          format: uuid
          nullable: true
        verified:
          type: boolean
        quote_modifier:
          type: number
    Error:
      type: object
      required:
        - path
        - method
        - message
      properties:
        path:
          type: string
          format: url
        method:
          type: string
          enum:
            - GET
            - POST
            - PUT
            - DELETE
            - PATCH
        message:
          type: string
